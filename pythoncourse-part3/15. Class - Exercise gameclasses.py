'''
Exercise 2-1: The Game class


We’ll start with the Game class. This class is a very simple class from which
two other classes will be derived.

The class has one initializer with two parameters: self and noOfQuestions.
noOfQuestions has a default value of zero.

Within the initializer, we assign noOfQuestions to an instance variable called
_noOfQuestions. Try defining the initializer and adding this assignment
statement yourself.
Done?

Besides the initializer, the Game class also has a property for getting and setting
the value of _noOfQuestion. The code for the getter method is shown below:

@property
def noOfQuestions(self):
return self._noOfQuestions

As you can see, the getter method simply returns the value of
_noOfQuestions.

The setter method, on the other hand, is more complex. It has two parameters –
self and value.

If value is less than one, the setter method sets _noOfQuestions to 1 and
prints the messages "Minimum Number of Questions = 1" and "Hence,
number of questions will be set to 1".


If value is more than ten, the setter method sets _noOfQuestions to 10 and
prints the messages "Maximum Number of Questions = 10" and "Hence,
number of questions will be set to 10".

If neither of the above applies, the setter method sets _noOfQuestions to
value. Try coding the setter method yourself.

Once you are done, the Game class is complete.


Exercise 2-2: The BinaryGame class

Next, let’s move on to the BinaryGame class. This class derives from the Game
class. Try defining the BinaryGame class yourself.

The BinaryGame class only has one method called generateQuestions().
This is an instance method and is responsible for generating binary questions.
Specifically, the method presents the player with a base-10 number and
requires the player to convert the number to a base-2 number. For instance, the
method may give the player the number 12. The player is then required to
convert the number to 1100, which is the base-2 equivalent of the number 12.
The structure of the generateQuestions() method is as follows:

def generateQuestions(self):
#import randint
#declare local variable called score
#use for loop to generate questions and evaluate answers
#return the value of score

(a) Importing the randint() function
As shown in the structure above, to generate the questions, we need to first
import the randint() function from the random module. The randint()
function generates a random integer within the range provided by us. We’ll use
that to generate numbers for our questions later. Try importing the function
yourself.

(b) Declaring variables
Next, we need to declare a local variable called score. This variable is used
to store the score of the player during the game. Try declaring this variable and
initializing it to zero.

(c) Generating questions
After this, we are ready to generate the questions. The number of questions
generated by the function depends on the instance variable _noOfQuestions
that BinaryGame inherited from Game. We’ll use the getter method to get this
variable. To control the number of questions generated, we’ll use a for loop.
Here’s how the for loop looks like:

for i in range(self.noOfQuestions):

Within the for loop, we use the randint() function to generate a random
number. The randint() function has two parameters, start and end, and
returns a random integer N such that start <= N <= end.

For instance, if randint(1, 9) is called, it’ll randomly return an integer from
the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9.

For our function, we’ll use randint() to generate a number from 1 to 100 and
assign the result to a local variable called base10.

Next, we need to use the input() function to prompt the user to convert the
number to binary. We’ll then assign the user’s answer to a local variable called
userResult.

Try doing these steps yourself.

Next, still within the for loop, we need to compare the user’s input with the
correct answer. We’ll do that using a while True loop. A while True loop is
basically a loop that runs indefinitely. This is because writing while True is
equivalent to writing something like while 1==1. Since 1 is always equals to
1 (hence always True), the while condition will never evaluate to False.

Hence, the loop will run indefinitely. In order to exit the loop, we need to use a
break statement.

Here’s a suggestion on how you can use a while True loop for this exercise.

while True:
try:
#cast user’s answer to an integer and evaluate the

answer
#update user score based on the answer

#break out from the while True loop using the break
statement

except:
#print error message if casting fails

#prompt user to key in the answer again

Recall that the input() function returns user input as a string? Within the
while True loop, we use a try, except statement to try casting the input
into a number. If the cast fails, the program should inform the user of the error
and prompt the user to type in a valid input.

The while True loop will keep looping until the try block executes correctly
and reaches the break statement.

Let’s work on the try block.

We’ll be using the built-in int() function to try casting the user’s input into an
integer. However, we need to inform Python that the number that we are trying
to cast is a base-2 number. This can be achieved with the code below:
answer = int(userResult, base = 2)

When we write base = 2 within the parentheses for the int() function,
Python knows that userResult is meant to be interpreted as a base-2 number.
int() then converts the string into a base-10 integer and returns the value. We
can then assign it to a local variable called answer.
Next, we use an if statement to compare answer with the original base-10
number (which is stored in the variable base10).

If the two values are the same, we inform the user that the answer is correct
and add 1 to the value of score. We then use the break keyword to exit the
while True loop.

If the user gets it wrong, we’ll inform the user and display the correct answer.
To do that, we can use the format() method covered in Chapter 4.3. To
display a number in binary form, we need to use the b formatter as shown
below:

print("Wrong answer. The correct answer is
{:b}.".format(base10))

After displaying the answer, we’ll use the break keyword to exit the while
True loop too. With that, the try block is complete. Try coding the try block
yourself.

Next, let us move on to the except block. This block is executed if the int()
function fails to convert the user’s input into a number. Inside the except
block, we inform the user that he/she did not enter a binary number and use the
input() function to prompt the user to enter a new number. We then use this
new input to update the variable userResult. With that, the except block is
complete.

(d) Returning value of score
After we exit the except block, we exit the while True loop and for loop as
well. At this stage, the function has finished generating all the necessary
questions. Now we simply return the value of score.

Code the solution below:
'''


'''
'
'
'
'
'
'
'
'
'

'
'
'
'
'
'
'
'
'
'
'
'
'
'
'

'
'
'
'
'
class Game:
    def __init__(self, noOfQuestions=0):
        self._noOfQuestions = noOfQuestions

    @property
    def noOfQuestions(self):
        return self._noOfQuestions

    @noOfQuestions.setter
    def noOfQuestions(self, value):
        if value < 1:
            self._noOfQuestions = 1
            print("\nMinimum Number of Questions = 1")
            print("Hence, number of questions will be set to 1")
        elif value > 10:
            self._noOfQuestions = 10
            print("\nMaximum Number of Questions = 10")
            print("Hence, number of questions will be set to 10")
        else:
            self._noOfQuestions = value


class BinaryGame(Game):
    def generateQuestions(noOfQuestions):
        from random import randint
        score = 0
        for i in range(noOfQuestions):
            base10 = randint(1, 100)
            userResult = input("\nPlease convert %d to binary: " % (base10))
            while True:
                try:
                    answer = int(userResult, base=2)
                    if answer == base10:
                        print("Correct Answer!")
                        score = score + 1
                        break
                    else:
                        print(
                            "Wrong answer. The correct answer is{:b}.".format(base10))
                        break
                except:
                    print("You did not enter a binary number. Please tryagain.")
                    userResult = input(
                        "\nPlease convert %d to binary: " % (base10))
        return score


#noOfQuestions(1, 1)
# Game.noOfQuestions(3)

#a = Game()
# print (A.p.__get__(a)) #2
# print(Game.noOfQuestions.__get__(3))  # 2

#test = Game()

# print(test.noOfQuestions.)

p1 = Game(3)

print(Game(1001).noOfQuestions)
print(p1.noOfQuestions)
# print(p1)
p1.noOfQuestions = 11
# print(p1.noOfQuestions=5)

#p2 = BinaryGame(40)
p2 = BinaryGame.generateQuestions(40)
#p2 = BinaryGame
#p2.noOfQuestions = 11
p2.generateQuestions = 5


#p2 = BinaryGame(5)
#p2.BinaryGame = 6
#p2.generateQuestions = 4


#p3 = BinaryGame(5)
#p3 = BinaryGame.noOfQuestions(5)

'''
